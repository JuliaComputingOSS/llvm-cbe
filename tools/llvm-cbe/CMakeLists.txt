# Support plugins.
set(LLVM_NO_DEAD_STRIP 1)

if (NOT USE_SYSTEM_LLVM)
  set(LLVM_LINK_COMPONENTS
    ${LLVM_TARGETS_TO_BUILD}
    Analysis
    AsmParser
    AsmPrinter
    BitReader
    CBackendCodeGen
    CBackendInfo
    CodeGen
    Core
    IRReader
    MC
    ScalarOpts
    SelectionDAG
    Support
    Target
    TransformUtils
    )


  add_llvm_tool(llvm-cbe
    llvm-cbe.cpp
    )
  export_executable_symbols(llvm-cbe)
endif()

if(USE_SYSTEM_LLVM)
  add_executable(llvm-cbe
    llvm-cbe.cpp
    )
  llvm_map_components_to_libnames(llvm_libs
    CBackendCodeGen
    CBackendInfo

    XRay
    WindowsManifest
    TableGen
    Symbolize
    DebugInfoPDB
    OrcJIT
    OrcError
    JITLink
    ObjectYAML
    MIRParser
    MCA
    LTO
    ObjCARCOpts
    Extensions
    Polly
    Passes
    Coroutines
    LineEditor
    LibDriver
    Interpreter
    FuzzMutate
    MCJIT
    ExecutionEngine
    RuntimeDyld
    DWARFLinker
    DlltoolDriver
    Option
    DebugInfoGSYM
    Coverage
    NVPTXCodeGen
    ipo
    Instrumentation
    Vectorize
    Linker
    IRReader
    AsmParser
    FrontendOpenMP
    NVPTXDesc
    NVPTXInfo
    BPFDisassembler
    BPFCodeGen
    BPFAsmParser
    BPFDesc
    BPFInfo
    X86Disassembler
    X86AsmParser
    X86CodeGen
    X86Desc
    X86Info
    AArch64Disassembler
    MCDisassembler
    AArch64CodeGen
    CFGuard
    GlobalISel
    SelectionDAG
    AsmPrinter
    DebugInfoDWARF
    CodeGen
    Target
    ScalarOpts
    InstCombine
    AggressiveInstCombine
    TransformUtils
    BitWriter
    Analysis
    ProfileData
    Object
    TextAPI
    BitReader
    Core
    Remarks
    BitstreamReader
    AArch64AsmParser
    MCParser
    AArch64Desc
    MC
    DebugInfoCodeView
    DebugInfoMSF
    BinaryFormat
    AArch64Utils
    AArch64Info
    Support
    Demangle
    )
  target_link_libraries(llvm-cbe LLVM ${llvm_libs})
endif()
